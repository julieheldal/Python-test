name: Generate Multi-Language SBOM with CycloneDX in JSON

on:
  push:
    branches:
      - "*"

jobs:
  generate-sbom:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create sboms directory
        run: |
          mkdir -p sboms
        working-directory: ${{ github.workspace }}

      # Node.js
      - name: Check if the project uses Node.js
        id: check-nodejs
        run:
          |
          if [ -f "package.json" ] && grep -q '"dependencies": *{' package.json; then
            echo "Node.js project detected."
            echo "NODE_PROJECT=true" >> $GITHUB_ENV
          else
            echo "No Node.js project detected. Skipping Node.js setup."
            echo "NODE_PROJECT=false" >> $GITHUB_ENV
          fi
      
      - name: Setup Node.js environment and Generate SBOM (if applicable)
        if: env.NODE_PROJECT == 'true'
        run: |
          echo "Installing CycloneDX..."
          npm install
          npm install -g @cyclonedx/cyclonedx-npm
          
          echo "Generating Node.js SBOM in JSON..."
          cyclonedx-npm --output-format JSON > sboms/node-bom.json
      # Node.js END


  # Python
      - name: Check if the project uses Python
        id: check-python
        run: |
          if [ -f "pyproject.toml" ] && grep -q 'dependencies' pyproject.toml; then
            echo "Python project detected."
            echo "PYTHON_PROJECT=true" >> $GITHUB_ENV
          elif [ -f "Pipfile.lock" ]; then
            echo "Python project detected."
            echo "PYTHON_PROJECT=true" >> $GITHUB_ENV
          elif [ -f "requirements.txt" ]; then
            echo "Python project detected."
            echo "PYTHON_PROJECT=true" >> $GITHUB_ENV
          else
            echo "No Python project detected. Skipping Python setup."
            echo "PYTHON_PROJECT=false" >> $GITHUB_ENV
          fi
      
      - name: Generate Python SBOM
        if: env.PYTHON_PROJECT == 'true'
        run: |
          echo "Installing CycloneDX..."
          pip install cyclonedx-bom
      
          echo "Generating Python SBOM in JSON"
          cyclonedx-py -e -o sboms/python-bom.json --format json
          
      # Python END 

      #OLD Python 
      # run: |
      #    if find . -type f -name "requirements.txt" -print -quit | grep -q .; then
      #     echo "PYTHON_PROJECT=true" >> $GITHUB_ENV
      #    else
      #     echo "PYTHON_PROJECT=false" >> $GITHUB_ENV
      #    fi   
      # cyclonedx-py -pip -i <path> -o ./sboms/python-bom.json --format json
        
      #  uses: CycloneDX/gh-python-generate-sbom@v2
      # with:
      #    input: $(find . -type f -name "requirements.txt")
      #    output: ./sboms/python-bom.json
      #   format: json
      # Python END

      # Java (Maven) - Need to insert plugin into pom.xml
      # - name: Check if the project uses Maven
      #   id: check-maven
      #   run: |
      #     if [ -f "pom.xml" ]; then
      #       echo "Maven project detected."
      #       echo "MAVEN_PROJECT=true" >> $GITHUB_ENV
      #     fi
      
      # - name: Setup Java environment and generate Java SBOM (if applicable)
      #   if: env.MAVEN_PROJECT == 'true'
      #   run: |
      #     echo "Building the project and generating Java SBOM in JSON..."
      #     mvn clean install cyclonedx:makeAggregateBom --batch-mode --errors
      #     cp target/bom.json sboms/maven-bom.json
      # Java (Maven) END

      # .NET
      - name: Check if the project uses .NET and get .NET version
        id: check-dotnet
        run: |
          csproj_paths=$(find . -name '*.csproj')          # Searches recursively within the directory to find .csproj files
          if [ -n "$csproj_paths" ]; then
            echo ".NET projects detected."
            echo "DOTNET_PROJECT=true" >> $GITHUB_ENV
            echo "CSPROJ_PATHS=$(echo "$csproj_paths" | tr '\n' ',')" >> $GITHUB_ENV
          else
            echo "No .NET project detected. Skipping .NET setup"
            echo "DOTNET_PROJECT=false" >> $GITHUB_ENV
          fi
      
      - name: Setup .NET environment and generate .NET SBOM (if applicable)
        if: env.DOTNET_PROJECT == 'true'
        run: |
          dotnet build
          echo "Installing CycloneDX"
          dotnet tool install --global CycloneDX
          IFS=',' read -ra ADDR <<< "$CSPROJ_PATHS"
          for csproj_path in "${ADDR[@]}"; do              # Creates an SBOM for each csproj file.
            dotnet CycloneDX "$csproj_path" -o sboms/dotnet-bom-$(basename "$csproj_path" .csproj).json -j
          done
      # .NET END

      # Archive all SBOMs
      - name: Archive SBOMs
        uses: actions/upload-artifact@v2
        with:
          name: sbom-artifact
          path: |
            ./sboms/node-bom.json
            ./sboms/python-bom.json
            # ./sboms/maven-bom.json  
            ./sboms/dotnet-bom-*.json
